# vim: ft=sh sw=2 ts=2 expandtab

function current_git_branch {
  ref=$(git symbolic-ref HEAD 2> /dev/null)
  current_branch=${ref#refs/heads/}

  # warn me if not working on master
  if [[ "${current_branch}" == "master" ]]; then
    echo "${C_GREEN}${current_branch}${C_RESET}"
  elif [[ -z "${current_branch}" ]]; then
    echo "${C_RED}detached${C_RESET}"
  else
    echo "${C_YELLOW}${current_branch}${C_RESET}"
  fi
}

function minutes_since_last_commit {
    now=`date +%s`
    last_commit=$(git log --pretty=format:'%at' -1 2> /dev/null) || return
    seconds_since_last_commit=$((now-last_commit))
    minutes_since_last_commit=$((seconds_since_last_commit/60))
    echo $minutes_since_last_commit
}

function git_current_author() {
  author=${GIT_AUTHOR_NAME:-$(git config --get user.name)}
  [[ ${author} != "Marco Valtas" ]] && echo "${C_YELLOW}A${C_RESET}"
}

# rendering git prompt if we are in a git repo
function git_prompt {
    $(git rev-parse --is-inside-work-tree 2> /dev/null) || return

    extra_info="["
    extra_info+="$(git_current_author)"
    extra_info+="]"
    [[ ${extra_info} == "[]" ]] && extra_info=""

    echo "($(current_git_branch))${extra_info}"
}

git-author() {
  args=(${@})
  case ${1} in
    set)
      export GIT_AUTHOR_NAME=${args[@]:1:2}
      ;;
    unset)
      unset GIT_AUTHOR_NAME
      ;;
    show|get)
      echo "Current authors: ${GIT_AUTHOR_NAME:-$(git config --get user.name)}"
      ;;
    *)
      echo "Usage git-author [set AUTHORS|unset|show|get]"
      git-author show
      ;;
  esac
}

# git prompt
export PS1="\[${C_RESET}\]\W \$(git_prompt)\$ "

